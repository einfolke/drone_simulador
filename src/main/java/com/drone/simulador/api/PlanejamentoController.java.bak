package com.drone.simulador.api;

import com.drone.simulador.api.dto.PlanejamentoRequest;
import com.drone.simulador.api.dto.PlanejamentoResponse;
import com.drone.simulador.api.dto.PlanejamentoResponse.BatteryPassoResponse;
import com.drone.simulador.api.dto.PlanejamentoResponse.BatteryResponse;
import com.drone.simulador.api.dto.PlanejamentoResponse.ViagemResponse;
import com.drone.simulador.domain.AgendarDrone;
import com.drone.simulador.domain.BatteryStep;
import com.drone.simulador.domain.Drone;
import com.drone.simulador.domain.DroneBatterySimulation;
import com.drone.simulador.domain.DroneBatterySimulator;
import com.drone.simulador.domain.Obstaculo;
import com.drone.simulador.domain.Partida;
import com.drone.simulador.domain.Pedido;
import com.drone.simulador.domain.Prioridade;
import com.drone.simulador.domain.Viagem;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sun.net.httpserver.Headers;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Objects;
import java.util.Optional;

public final class PlanejamentoController implements HttpHandler {

    private static final DateTimeFormatter ISO_FORMATTER = DateTimeFormatter.ISO_DATE_TIME;

    private final ObjectMapper mapper;
    private final AgendarDrone agendador;
    private final DroneBatterySimulator batterySimulator;

    public PlanejamentoController(ObjectMapper mapper) {
        this(mapper, new AgendarDrone(), new DroneBatterySimulator());
    }

    public PlanejamentoController(ObjectMapper mapper, AgendarDrone agendador, DroneBatterySimulator batterySimulator) {
        this.mapper = Objects.requireNonNull(mapper, "mapper nao pode ser nulo");
        this.agendador = Objects.requireNonNull(agendador, "agendador nao pode ser nulo");
        this.batterySimulator = Objects.requireNonNull(batterySimulator, "batterySimulator nao pode ser nulo");
    }

    @Override
    public void handle(HttpExchange exchange) throws IOException {
        try (exchange) {
            if (!"POST".equalsIgnoreCase(exchange.getRequestMethod())) {
                writeJson(exchange, 405, new ErrorResponse("Metodo nao permitido", "Use POST"));
                return;
            }

            PlanejamentoRequest requestBody;
            try (InputStream body = exchange.getRequestBody()) {
                requestBody = mapper.readValue(body, PlanejamentoRequest.class);
            } catch (JsonProcessingException e) {
                writeJson(exchange, 400, new ErrorResponse("JSON invalido", Optional.ofNullable(e.getOriginalMessage()).orElse(e.getMessage())));
                return;
            }

            try {
                PlanejamentoResponse response = processar(requestBody);
                writeJson(exchange, 200, response);
            } catch (IllegalArgumentException e) {
                writeJson(exchange, 422, new ErrorResponse("Dados invalidos", e.getMessage()));
            } catch (Exception e) {
                writeJson(exchange, 500, new ErrorResponse("Erro interno", e.getMessage()));
            }
        }
    }

    private PlanejamentoResponse processar(PlanejamentoRequest request) {
        List<PlanejamentoRequest.DronePayload> dronesPayload = Optional.ofNullable(request.drones()).orElse(List.of());
        List<PlanejamentoRequest.PedidoPayload> pedidosPayload = Optional.ofNullable(request.pedidos()).orElse(List.of());
        List<PlanejamentoRequest.ObstaculoPayload> obstaculosPayload = Optional.ofNullable(request.obstaculos()).orElse(List.of());

        if (dronesPayload.isEmpty()) {
            throw new IllegalArgumentException("Campo 'drones' nao pode ser vazio");
        }
        if (pedidosPayload.isEmpty()) {
            throw new IllegalArgumentException("Campo 'pedidos' nao pode ser vazio");
        }

        List<Drone> drones = dronesPayload.stream().map(this::toDrone).toList();
        List<Pedido> pedidos = pedidosPayload.stream().map(this::toPedido).collect(ArrayList::new, ArrayList::add, ArrayList::addAll);
        List<Obstaculo> obstaculos = obstaculosPayload.stream().map(this::toObstaculo).toList();

        List<Viagem> viagens = agendador.planejar(drones, new ArrayList<>(pedidos), obstaculos);
        double tempoTotal = viagens.stream().mapToDouble(Viagem::getTempoHoras).sum();
        List<ViagemResponse> viagensResponse = viagens.stream().map(this::toResponse).toList();

        return new PlanejamentoResponse("java", tempoTotal, viagensResponse);
    }

    private Drone toDrone(PlanejamentoRequest.DronePayload payload) {
        if (payload == null) {
            throw new IllegalArgumentException("Drone nao pode ser nulo");
        }

        String id = Optional.ofNullable(payload.id()).filter(s -> !s.isBlank()).orElseThrow(() -> new IllegalArgumentException("Drone sem identificador"));

        double capacidade = firstPositive(payload.capacidadeKg(), payload.capacidadePorPeso())
            .orElseThrow(() -> new IllegalArgumentException("Drone " + id + " precisa de capacidade em kg"));

        Optional<Double> tempoExplicitamenteInformado = firstPositive(payload.tempoVooHoras(), payload.tempoDeVooPorCarga());
        Optional<Double> alcanceInformado = firstPositive(payload.autonomiaKm(), payload.distanciaPorCarga());

        double tempoDeVoo = tempoExplicitamenteInformado.orElseGet(() ->
            alcanceInformado.map(distancia -> distancia / Math.max(capacidade, 1e-6)).orElse(1.0)
        );

        if (tempoDeVoo <= 0) {
            throw new IllegalArgumentException("Drone " + id + " precisa de tempo de voo positivo");
        }

        return new Drone(id, capacidade, tempoDeVoo);
    }

    private Pedido toPedido(PlanejamentoRequest.PedidoPayload payload) {
        if (payload == null) {
            throw new IllegalArgumentException("Pedido nao pode ser nulo");
        }

        double x = Optional.ofNullable(payload.x()).orElseThrow(() -> new IllegalArgumentException("Pedido sem coordenada x"));
        double y = Optional.ofNullable(payload.y()).orElseThrow(() -> new IllegalArgumentException("Pedido sem coordenada y"));
        double peso = Optional.ofNullable(payload.pesoKg()).orElseThrow(() -> new IllegalArgumentException("Pedido sem peso"));

        String prioridadeBruta = Optional.ofNullable(payload.prioridade()).map(String::trim)
            .filter(s -> !s.isEmpty())
            .orElseThrow(() -> new IllegalArgumentException("Pedido sem prioridade"));

        Prioridade prioridade;
        try {
            prioridade = Prioridade.valueOf(prioridadeBruta.toUpperCase(Locale.ROOT));
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Prioridade invalida: " + prioridadeBruta);
        }

        LocalDateTime tempoChegada = parseTempo(payload.tempoChegada());
        Partida local = new Partida(x, y);
        if (tempoChegada != null) {
            return new Pedido(local, peso, prioridade, tempoChegada);
        }
        return new Pedido(local, peso, prioridade);
    }

    private LocalDateTime parseTempo(String valor) {
        if (valor == null || valor.isBlank()) {
            return null;
        }
        try {
            return LocalDateTime.parse(valor, ISO_FORMATTER);
        } catch (DateTimeParseException ignored) {
            try {
                return OffsetDateTime.parse(valor).toLocalDateTime();
            } catch (DateTimeParseException e) {
                throw new IllegalArgumentException("tempoChegada invalido: " + valor);
            }
        }
    }

    private Obstaculo toObstaculo(PlanejamentoRequest.ObstaculoPayload payload) {
        if (payload == null) {
            throw new IllegalArgumentException("Obstaculo nao pode ser nulo");
        }
        double x = Optional.ofNullable(payload.x()).orElseThrow(() -> new IllegalArgumentException("Obstaculo sem x"));
        double y = Optional.ofNullable(payload.y()).orElseThrow(() -> new IllegalArgumentException("Obstaculo sem y"));
        double raio = Optional.ofNullable(payload.raio()).orElseThrow(() -> new IllegalArgumentException("Obstaculo sem raio"));
        if (raio <= 0) {
            throw new IllegalArgumentException("Obstaculo com raio invalido: " + raio);
        }
        return new Obstaculo(x, y, raio);
    }

    private ViagemResponse toResponse(Viagem viagem) {
        List<Long> idsPedidos = viagem.getPedidos().stream().map(Pedido::getId).toList();
        List<double[]> rota = viagem.getRota().stream().map(p -> new double[] { p.x(), p.y() }).toList();
        DroneBatterySimulation simulacao = batterySimulator.simular(viagem);
        BatteryResponse bateria = toBatteryResponse(simulacao);
        return new ViagemResponse(
            viagem.getDrone().getId(),
            viagem.getPesoTotalKg(),
            viagem.getDistanciaKm(),
            viagem.getTempoHoras(),
            idsPedidos,
            rota,
            bateria
        );
    }

    private BatteryResponse toBatteryResponse(DroneBatterySimulation simulacao) {
        List<BatteryPassoResponse> passos = simulacao.passos().stream()
            .map(this::toBatteryStep)
            .toList();
        return new BatteryResponse(
            simulacao.distanciaTotalKm(),
            simulacao.tempoTotalHoras(),
            simulacao.rotaCompleta(),
            passos
        );
    }

    private BatteryPassoResponse toBatteryStep(BatteryStep passo) {
        return new BatteryPassoResponse(
            passo.distanciaSegmentoKm(),
            passo.distanciaAcumuladaKm(),
            passo.tempoSegmentoHoras(),
            passo.tempoAcumuladoHoras(),
            passo.cargaRestantePercentual()
        );
    }

    private Optional<Double> firstPositive(Double... valores) {
        if (valores == null) {
            return Optional.empty();
        }
        for (Double valor : valores) {
            if (valor != null && valor > 0) {
                return Optional.of(valor);
            }
        }
        return Optional.empty();
    }

    private void writeJson(HttpExchange exchange, int status, Object body) throws IOException {
        byte[] payload = mapper.writeValueAsBytes(body);
        Headers headers = exchange.getResponseHeaders();
        headers.set("Content-Type", "application/json; charset=utf-8");
        exchange.sendResponseHeaders(status, payload.length);
        try (OutputStream out = exchange.getResponseBody()) {
            out.write(payload);
        }
    }

    private record ErrorResponse(String erro, String detalhes) {}
}



